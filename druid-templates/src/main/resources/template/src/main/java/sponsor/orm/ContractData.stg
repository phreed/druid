import "dataTypeMaps.stg"

PATH(delimiter, directory, contract, isSkeleton, item) ::= <%
<directory.path><delimiter>src<delimiter><contract.root.sponsor.path><delimiter><contract.root.name.camel><delimiter>orm<delimiter><item.name.bactrian>Data.java
%>


SKELETON(contract,item) ::= <<
>>

BODY(contract,item) ::= <<
// ST:BODY:start

// ST:package:start
package <package(contract)>;
// ST:package:finish

import java.io.Serializable;

import android.content.ContentValues;
import android.os.Parcel;
import android.os.Parcelable;

public class <item.name.bactrian>Data implements Parcelable, Serializable {

	//private static final long serialVersionUID = 5505248865103008665L;

	// ST:putDeclaration:start
	<item.fields: { field | <putDeclaration(field)> }; separator="\n">
	// ST:putDeclaration:finish
	
	public <item.name.bactrian>Data(
	    // ST:constructorParameters:start
	    <item.fields: { field | <javaTypeMap.(field.dtype)> <field.name.camel> }; separator=", ">){		
	    // ST:constructorParameters:finish
	    // ST:constructorAsignments:start
	    <item.fields: { field | this.<field.name.camel> = <field.name.camel>}; separator=";\n">	
	    // ST:constructorAsignments:finish
	}

	@Override
	public String toString() {
	    // ST:constructToString:start
	    return <item.fields: { field | " <field.name.camel>: " + <field.name.camel> }; separator="+ ">;
	    // ST:constructToString:finish
	}

	public ContentValues getCV() {
		return <item.name.bactrian>Creator.getCVfrom<item.name.camel>(this);
	}

	public <item.name.bactrian>Data clone() {
	        // ST:constructClone:start
		return new <item.name.bactrian>Data(<item.fields: { field | <field.name.camel> }; separator=", ">);
		// ST:constructClone:finish
	}

	// these are for parcelable interface
	@Override
	public int describeContents() {
		return 0;
	}

	@Override
	public void writeToParcel(Parcel dest, int flags) {
	    // ST:constructWriteParcel:start
	    <item.fields: { field | dest.<androidWriteParcelMethodMap.(field.dtype)>(<field.name.camel>); }; separator="\n">
	    // ST:constructWriteParcel:finish
	}
		
	public static final Parcelable.Creator\<<item.name.bactrian>Data> CREATOR = new Parcelable.Creator\<<item.name.bactrian>Data>() {
		public <item.name.bactrian>Data createFromParcel(Parcel in) {
			return new <item.name.bactrian>Data(in);
		}

		public <item.name.bactrian>Data[] newArray(int size) {
			return new <item.name.bactrian>Data[size];
		}
	};

	private <item.name.bactrian>Data(Parcel in) {
            // ST:constructReadParcel:start
	    <item.fields: { field | <field.name.camel> = in.<androidReadParcelMethodMap.(field.dtype)>(); }; separator="\n">\
	    // ST:constructReadParcel:finish
	}

}
>>

package(contract) ::= "<contract.root.sponsor.base>.<contract.root.name.camel>.orm"

putDeclaration(field) ::= <%
    public <javaTypeMap.(field.dtype)> <field.name.camel>;
%>



