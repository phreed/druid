import "dataTypeMaps.stg"

PATH(delimiter, directory, contract, isSkeleton, item) ::= <%
<directory.path><delimiter>src<delimiter><contract.root.sponsor.path><delimiter><contract.root.name.camel><delimiter>ui<delimiter><item.name.camel><delimiter><item.name.bactrian>ViewFragment.java
%>


SKELETON(contract,item) ::= <<
>>

BODY(contract,item) ::= <<


package <package(contract,item)>;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.graphics.Color;
import android.os.Bundle;
import android.os.RemoteException;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.Toast;

<item.dataTypes: {dataType | <androidViewDefaultViewTypeImportMap.(dataType)> }; separator="\n">

import <contract.root.sponsor.base>.<contract.root.name.camel>.R;
import <contract.root.sponsor.base>.<contract.root.name.camel>.orm.<item.name.bactrian>Data;
import <contract.root.sponsor.base>.<contract.root.name.camel>.orm.<contract.root.name.bactrian>Resolver;

public class <item.name.bactrian>ViewFragment extends Fragment {
    // LOG TAG, handles refactoring changes
    private static final String LOG_TAG = <item.name.bactrian>ViewFragment.class
            .getCanonicalName();

    private <contract.root.name.bactrian>Resolver resolver;
    public final static String rowIdentifyerTAG = "index";

    private OnOpenWindowInterface mOpener;
    
    <item.name.bactrian>Data <item.name.camel>Data;
    
    // ST:uiViewDisplayFieldDeclarationTemplate:start
    <item.fields: { field | <uiViewDisplayFieldDeclarationTemplate(item, field)> }; separator="\n">
    // ST:uiViewDisplayFieldDeclarationTemplate:end
    
    // buttons for edit and delete
    Button editButton;
    Button deleteButton;

    // on-click listener, calls appropriate methods on user click on buttons
    // TODO what pattern is this... ?
    OnClickListener myOnClickListener = new OnClickListener() {
        @Override
        public void onClick(View view) {

            switch (view.getId()) {
            case R.id.button_<item.name.snake>_view_to_delete:
                deleteButtonPressed();
                break;
            case R.id.button_<item.name.snake>_view_to_edit:
                editButtonPressed();
                break;
            default:
                break;
            }
        }
    };

    public static <item.name.bactrian>ViewFragment newInstance(long index) {
        <item.name.bactrian>ViewFragment f = new <item.name.bactrian>ViewFragment();

        // Supply index input as an argument.
        Bundle args = new Bundle();
        args.putLong(rowIdentifyerTAG, index);
        f.setArguments(args);

        return f;
    }

    // this fragment was attached to an activity

    @Override
    public void onAttach(Activity activity) {
        super.onAttach(activity);
        try {
            mOpener = (OnOpenWindowInterface) activity;
            resolver = new <contract.root.name.bactrian>Resolver(activity);
        } catch (ClassCastException e) {
            throw new ClassCastException(activity.toString()
                    + " must implement OnOpenWindowListener");
        }
    }

    // this fragment is being created.

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setRetainInstance(true);

    }

    // this fragment is creating its view before it can be modified
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
            Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.<item.name.snake>_view_fragment,
                container, false);
        container.setBackgroundColor(Color.CYAN);
        return view;
    }

    // this fragment is modifying its view before display
    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);

        // ST:uiViewDisplayFieldLinkToXMLTemplate:start
        <item.fields: { field | <uiViewDisplayFieldLinkToXMLTemplate(item,field)> }; separator="\n">
        // ST:uiViewDisplayFieldLinkToXMLTemplate:end 
        
        // TODO: thread the lookup
        // set the displayed values to 'defualts' until the screen loads (threading & progress bar not yet implmented)
        // really shouldn't need a progress bar... since the ContentProvider should be local, but will add it in just incase
        
        // ST:uiViewDisplayFieldViewToDefaultTemplate:start
        <item.fields: { field | <uiViewDisplayFieldViewToDefaultTemplate(item,field)> }; separator="\n">
        // ST:uiViewDisplayFieldViewToDefaultTemplate:end 
        
        
        editButton = (Button) getView().findViewById(
                R.id.button_<item.name.snake>_view_to_edit);
        deleteButton = (Button) getView().findViewById(
                R.id.button_<item.name.snake>_view_to_delete);

        editButton.setOnClickListener(myOnClickListener);
        deleteButton.setOnClickListener(myOnClickListener);

        try {
            setUiTo<item.name.bactrian>Data(getUniqueKey());
        } catch (RemoteException e) {
            Toast.makeText(getActivity(),
                    "Error retrieving information from local data store.",
                    Toast.LENGTH_LONG).show();
            Log.e(LOG_TAG, "Error getting <item.name.bactrian> data from C.P.");
            // e.printStackTrace();
        }
    }   
    
    public void setUiTo<item.name.bactrian>Data(int getUniqueKey) throws RemoteException {
        <item.name.bactrian>Data <item.name.camel> = null;
        
        <item.name.camel> = resolver.get<item.name.bactrian>DataViaRowID(getUniqueKey);
       
        if (<item.name.camel> == null) {
            getView().setVisibility(View.GONE);
        } else { // else it just displays empty screen
            // ST:uiViewSetDisplayViewFromOrmObjectTemplate:start
            <item.fields: { field | <uiViewSetDisplayViewFromOrmObjectTemplate(item, field)> }; separator="\n">
            // ST:uiViewSetDisplayViewFromOrmObjectTemplate:end 
        }
    }

    // action to be performed when the edit button is pressed
    private void editButtonPressed() {
        mOpener.openEdit<item.name.bactrian>Fragment(<item.name.camel>Data.KEY_ID);
    }

    // action to be performed when the delete button is pressed
    private void deleteButtonPressed() {
        String message;

        message = getResources().getString(
                R.string.<item.name.snake>_view_deletion_dialog_message);

        new AlertDialog.Builder(getActivity())
                .setIcon(android.R.drawable.ic_dialog_alert)
                .setTitle(R.string.<item.name.snake>_view_deletion_dialog_title)
                .setMessage(message)
                .setPositiveButton(R.string.<item.name.snake>_view_deletion_dialog_yes,
                        new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog,
                                    int which) {
                                try {
                                    resolver.deleteAll<item.name.bactrian>WithRowID(<item.name.camel>Data.KEY_ID);
                                } catch (RemoteException e) {
                                    Log.e(LOG_TAG, "RemoteException Caught => "
                                            + e.getMessage());
                                    e.printStackTrace();
                                }
                                mOpener.openList<item.name.bactrian>Fragment();
                                if (getResources().getBoolean(R.bool.isTablet) == true) {
                                    mOpener.openView<item.name.bactrian>Fragment(-1);
                                } else {
                                    getActivity().finish();
                                }
                            }

                        })
                .setNegativeButton(R.string.<item.name.snake>_view_deletion_dialog_no,
                        null).show();
    }

    public int getUniqueKey() {
        return getArguments().getInt(rowIdentifyerTAG, 0);
    }

    @Override
    public void onDetach() {
        super.onDetach();
        mOpener = null;
        resolver = null;
    }
}
>>

package(contract,item) ::= <%
<contract.root.sponsor.base>.<contract.root.name.camel>.ui.<item.name.camel>
%>
