import "dataTypeMaps.stg"

PATH(delimiter, directory, contract, isSkeleton, item) ::= <%
<directory.path><delimiter>src<delimiter><contract.root.sponsor.path><delimiter><contract.root.name.camel><delimiter>orm<delimiter><contract.root.name.bactrian>Resolver.java
%>


SKELETON(contract) ::= <<
>>

BODY(contract) ::= <<
// ST:BODY:start

// ST:package:inline
package <package(contract)>;
// ST:package:complete

import java.io.FileNotFoundException;
import java.util.ArrayList;

import android.app.Activity;
import android.content.ContentProviderOperation;
import android.content.ContentProviderResult;
import android.content.ContentResolver;
import android.content.ContentValues;
import android.content.OperationApplicationException;
import android.content.res.AssetFileDescriptor;
import android.database.Cursor;
import android.net.Uri;
import android.os.ParcelFileDescriptor;
import android.os.RemoteException;


import <contract.root.sponsor.base>.<contract.root.name.camel>.provider.ContentDescriptor;

/**
 * encapsulation of the ContentProviderClient for a single URI
 * \<p>
 * Uses ContentResolver instead of ContentProviderClient or other mechanism to
 * simplify code and to make this object thread safe.
 * 
 * @author Michael A. Walker
 * 
 */
public class <contract.root.name.bactrian>Resolver {

	private ContentResolver cr;
	
	// ST:declareRelationURI:start
	<contract.root.relations: { relation | <declareRelationURI(relation)> }; separator="\n">
	// ST:declareRelationURI:finish

	public <contract.root.name.bactrian>Resolver(Activity activity) {
		cr = activity.getContentResolver();
	}

	public ContentProviderResult[] applyBatch(
			final ArrayList\<ContentProviderOperation> operations)
			throws RemoteException, OperationApplicationException {
		return cr.applyBatch(ContentDescriptor.AUTHORITY, operations);
	}

	/*
	 * Bulk Insert for each ORM Data Type
	 */
	 
	// ST:makeBulkInsertForRelation:start
	<contract.root.relations: { relation | <makeBulkInsertForRelation(relation)> }; separator="\n">
	// ST:makeBulkInsertForRelation:finish

	/*
	 * Delete for each ORM Data Type
	 */
	// ST:makeDeleteRawForRelation:start
	<contract.root.relations: { relation | <makeDeleteRawForRelation(relation)> }; separator="\n">
	// ST:makeDeleteRawForRelation:finish
	 
	/*
	 * Get Type for a URI
	 */
	public String getType(Uri uri) throws RemoteException {
		return cr.getType(uri);
	}

	/*
	 * Insert for each ORM Data Type
	 */
	
	// ST:makeInsertOrmForRelation:start
	<contract.root.relations: { relation | <makeInsertOrmForRelation(relation)> }; separator="\n">
	// ST:makeInsertOrmForRelation:finish

	/*
	 * access files from the content provider
	 */
	public AssetFileDescriptor openAssetFileDescriptor(final Uri uri,
			final String mode) throws RemoteException, FileNotFoundException {
		return cr.openAssetFileDescriptor(uri, mode);
	}

	public ParcelFileDescriptor openFileDescriptor(final Uri uri,
			final String mode) throws RemoteException, FileNotFoundException {
		return cr.openFileDescriptor(uri, mode);
	}

	/*
	 * Query for each ORM Data Type
	 */

	// ST:makeQueryOrmForRelation:start
	<contract.root.relations: { relation | <makeQueryOrmForRelation(relation)> }; separator="\n">
	// ST:makeQueryOrmForRelation:finish 
	

	/*
	 * Update for each ORM Data Type
	 */

	// ST:makeUpdateOrmForRelation:start
	<contract.root.relations: { relation | <makeUpdateOrmForRelation(relation)> }; separator="\n">
	// ST:makeUpdateOrmForRelation:finish 

	/*
	 * Sample extensions of above for customized additional methods for classes
	 * that extend this one
	 */

	 
	 // ST:makeGetAllDataOrmForRelation:start
	<contract.root.relations: { relation | <makeGetAllDataOrmForRelation(relation)> }; separator="\n">
	// ST:makeGetAllDataOrmForRelation:finish 
	
	// ST:makeGetDataViaRowIDOrmForRelation:start
	<contract.root.relations: { relation | <makeGetDataViaRowIDOrmForRelation(relation)> }; separator="\n">
	// ST:makeGetDataViaRowIDOrmForRelation:finish 

	// ST:makeDeleteAllWithIDOrmForRelation:start
	<contract.root.relations: { relation | <makeDeleteAllWithIDOrmForRelation(relation)> }; separator="\n">
	// ST:makeDeleteAllWithIDOrmForRelation:finish 

	// ST:makeUpdatWithIdOrmForRelation:start
	<contract.root.relations: { relation | <makeUpdatWithIdOrmForRelation(relation)> }; separator="\n">
	// ST:makeUpdatWithIdOrmForRelation:finish 
	
}
>>

package(contract) ::= "<contract.root.sponsor.base>.<contract.root.name.camel>.orm"

declareRelationURI(relation) ::= <%
private Uri <relation.name.camel>URI = ContentDescriptor.<relation.name.bactrian>.CONTENT_URI;
%>

makeBulkInsertForRelation(relation) ::= <<
public int bulkInsert<relation.name.bactrian>(final ArrayList\<<relation.name.bactrian>Data> data)
		throws RemoteException {
	ContentValues[] values = new ContentValues[data.size()];
	int index = 0;
	for (<relation.name.bactrian>Data <relation.name.camel> : data) {
		values[index] = <relation.name.camel>.getCV();
		++index;
	}
	return cr.bulkInsert(<relation.name.camel>URI, values);
}
>>

makeDeleteRawForRelation(relation) ::= <<
public int delete<relation.name.bactrian>Data(final String selection,
			final String[] selectionArgs) throws RemoteException {
		return cr.delete(<relation.name.camel>URI, selection, selectionArgs);
	}
>>

makeInsertOrmForRelation(relation) ::= <<
public Uri insert(final <relation.name.bactrian>Data <relation.name.camel>Object) throws RemoteException {
	ContentValues tempCV = <relation.name.camel>Object.getCV();
	tempCV.remove(ContentDescriptor.<relation.name.bactrian>.Cols.ID);
	return cr.insert(<relation.name.camel>URI, tempCV);
}
>>

makeQueryOrmForRelation(relation) ::= <<
public ArrayList\<<relation.name.bactrian>Data> query<relation.name.bactrian>Data(final String[] projection,
		final String selection, final String[] selectionArgs,
		final String sortOrder) throws RemoteException {
	// query the C.P.
	Cursor result = cr.query(<relation.name.camel>URI, projection, selection,
			selectionArgs, sortOrder);
	// make return object
	ArrayList\<<relation.name.bactrian>Data> rValue = new ArrayList\<<relation.name.bactrian>Data>();
	// convert cursor to reutrn object
	rValue.addAll(<relation.name.bactrian>Creator.get<relation.name.bactrian>DataArrayListFromCursor(result));
	// return 'return object'
	return rValue;
}
>>

makeUpdateOrmForRelation(relation) ::= <<
public int update<relation.name.bactrian>Data(final <relation.name.bactrian>Data values,
		final String selection, final String[] selectionArgs)
		throws RemoteException {
	return cr.update(<relation.name.camel>URI, values.getCV(), selection, selectionArgs);
}
>>


makeUpdatWithIdOrmForRelation(relation) ::= <<
public int update<relation.name.bactrian>WithID(<relation.name.bactrian>Data data) throws RemoteException {
	String selection = "user_id = ?";
	String[] selectionArgs = { String.valueOf(data.KEY_ID) };
	return update<relation.name.bactrian>Data(data, selection, selectionArgs);
}
>>	
	
makeDeleteAllWithIDOrmForRelation(relation) ::= <<
public int deleteAll<relation.name.bactrian>WithRowID(long rowID) throws RemoteException {
   String[] args = { String.valueOf(rowID) };
   return delete<relation.name.bactrian>Data(ContentDescriptor.<relation.name.bactrian>.Cols.ID + " = ? ", args);
}
>>

makeGetDataViaRowIDOrmForRelation(relation) ::= <<
public <relation.name.bactrian>Data get<relation.name.bactrian>DataViaRowID(final int rowID)
		throws RemoteException {
	String[] selectionArgs = { String.valueOf(rowID) };
	ArrayList\<<relation.name.bactrian>Data> results = query<relation.name.bactrian>Data(null,
			ContentDescriptor.<relation.name.bactrian>.Cols.ID + "= ?",
			selectionArgs, null);
	if (results.size() > 0) {
		return results.get(0);
	} else {
		return null;
	}
}
>>

makeGetAllDataOrmForRelation(relation) ::= <<
public ArrayList\<<relation.name.bactrian>Data> getAll<relation.name.bactrian>Data() throws RemoteException {
	return query<relation.name.bactrian>Data(null, null, null, null);
}
>>
