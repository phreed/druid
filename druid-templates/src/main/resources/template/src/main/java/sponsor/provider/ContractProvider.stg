import "dataTypeMaps.stg"

PATH(delimiter, directory, paths, contract, isSkeleton, item) ::= <%
<directory.path><delimiter>
<paths.src_main_java><delimiter>
<contract.root.sponsor.path><delimiter>
<contract.root.name.camel><delimiter>
provider<delimiter>
<contract.root.name.bactrian>Provider.java
%>

SKELETON(contract,item) ::= <<
>>

BODY(contract) ::= <<
// ST:BODY:start


package <package(contract)>;

import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import android.content.ContentProvider;
import android.content.ContentUris;
import android.content.ContentValues;
import android.content.UriMatcher;
import android.database.Cursor;
import android.database.sqlite.SQLiteException;
import android.database.sqlite.SQLiteQueryBuilder;
import android.net.Uri;
import android.provider.BaseColumns;

public class <contract.root.name.bactrian>Provider extends <contract.root.name.bactrian>ProviderBase  {

  private static final Logger logger = LoggerFactory.getLogger("<contract.root.name>.provider");

	// Local backend DB
	<contract.root.name.bactrian>DataDBAdaptor mDB;

	// shorten variable names for easier readability
	
	// ST:createShortContentURIforRelations:begin
	<contract.root.relations: { relation | <createShortContentURIforRelations(relation)> }; separator="\n">
	// ST:createShortContentURIforRelations:finish
	
  public static String AUTHORITY = <providerClassName(contract)>.AUTHORITY;
	
	// ST:createShortURIMatchingTokens:begin
	<contract.root.relations: { relation | <createShortURIMatchingTokens(relation)> }; separator="\n">
	// ST:createShortURIMatchingTokens:finish
	
        	
  private static final UriMatcher uriMatcher = <providerClassName(contract)>.URI_MATCHER;

	@Override
	synchronized public boolean onCreate() {
    logger.debug("onCreate()");
		mDB = new <contract.root.name.bactrian>DataDBAdaptor(getContext());
		mDB.open();
		return true;
	}

	@Override
	synchronized public String getType(Uri uri) {
    logger.debug("getType()");
		switch (uriMatcher.match(uri)) {

	       // ST:createContentTypeReturnsforRelations:begin
	       <contract.root.relations: { relation | <createContentTypeReturnsforRelations(relation)> }; separator="\n">
	       // ST:createContentTypeReturnsforRelations:finish

		default:
			throw new UnsupportedOperationException("URI " + uri
					+ " is not supported.");
		}
	}

	@Override
	synchronized public Cursor query(final Uri uri, final String[] projection,
			final String selection, final String[] selectionArgs,
			final String sortOrder) {
    logger.debug("query()");
		String modifiedSelection = selection;
		switch (uriMatcher.match(uri)) {
		
	       // ST:createPublicQueryforRelations:begin
	       <contract.root.relations: { relation | <createPublicQueryforRelations(relation)> }; separator="\n">
	       // ST:createPublicQueryforRelations:finish
	       
		default:
			return null;
		}

	}

	/*
	 * Private query that does the actual query based on the table
	 */

	synchronized private Cursor query(final Uri uri, final String tableName,
			final String[] projection, final String selection,
			final String[] selectionArgs, final String sortOrder) {

		SQLiteQueryBuilder builder = new SQLiteQueryBuilder();
		builder.setTables(tableName);
		return builder.query(mDB.getDB(), projection, selection, selectionArgs,
				null, null, sortOrder);
	}

	@Override
    synchronized public Uri insert(Uri uri, ContentValues assignedValues) {

    logger.debug("insert()");

		final int match = uriMatcher.match(uri);
		switch (match) {
	
      // ST:createUpsertForRelations:begin
      <contract.root.relations: { relation | <createUpsertForRelations(relation)> }; separator="\n">
      // ST:createUpsertForRelations:finish
	
      // breaks intentionally omitted
      <contract.root.relations: { relation | case <relation.name.cobra>_SINGLE_ROW: }; separator="\n">
		   {
			throw new IllegalArgumentException( "Unsupported URI, unable to insert into specific row: " + uri);
		   }
		   default:
		   {
			throw new IllegalArgumentException("Unsupported URI: " + uri);
		   }
	        }
	}

	@Override
	synchronized public int delete(Uri uri, String whereClause, String[] whereArgs) {
    logger.debug("delete()");

		switch (uriMatcher.match(uri)) {
	        // ST:createDeleteforRelations:begin
	        <contract.root.relations: { relation | <createDeleteforRelations(relation)> }; separator="\n">
	        // ST:createDeleteforRelations:finish

		default:
			throw new IllegalArgumentException("Unsupported URI: " + uri);
		}

	}

	/*
	 * Private method to both attempt the delete command, and then to notify of
	 * the changes
	 */
	private int deleteAndNotify(final Uri uri, final String tableName,
			final String whereClause, final String[] whereArgs) {
		int count = mDB.delete(tableName, whereClause, whereArgs);
		if (count > 0) {
			getContext().getContentResolver().notifyChange(uri, null);
		}
		return count;
	}

	@Override
	synchronized public int update(Uri uri, ContentValues values, String whereClause,
			String[] whereArgs) {
    logger.debug( "update()");

		switch (uriMatcher.match(uri)) {
		
		// ST:createUpdateForRelations:begin
	        <contract.root.relations: { relation | <createUpdateForRelations(relation)> }; separator="\n">
	        // ST:createUpdateForRelations:finish
		
		default:
			throw new IllegalArgumentException("Unknown URI " + uri);
		}
	}

	/*
	 * private update function that updates based on parameters, then notifies
	 * change
	 */
	private int updateAndNotify(final Uri uri, final String tableName,
			final ContentValues values, final String whereClause,
			final String[] whereArgs) {
		int count = mDB.update(tableName, values, whereClause, whereArgs);
		if (count > 0) {
			getContext().getContentResolver().notifyChange(uri, null);
		}
		return count;
	}
}
>>

createShortURIMatchingTokens(relation) ::= <<
public static final int <relation.name.cobra>_ALL_ROWS = <providerRelationClassName(contract,relation)>.PATH_TOKEN;
public static final int <relation.name.cobra>_SINGLE_ROW = <providerRelationClassName(contract,relation)>.PATH_FOR_ID_TOKEN;
>>

createShortContentURIforRelations(relation) ::= <%
public final static Uri <relation.name.cobra>_CONTENT_URI = <providerRelationClassName(contract,relation)>.CONTENT_URI;
%>

createContentTypeReturnsforRelations(relation) ::= <<
case <relation.name.cobra>_ALL_ROWS: return <providerRelationClassName(contract,relation)>.CONTENT_TYPE_DIR;
case <relation.name.cobra>_SINGLE_ROW: return <providerRelationClassName(contract,relation)>.CONTENT_ITEM_TYPE;
>>

createPublicQueryforRelations(relation) ::= <<
case <relation.name.cobra>_SINGLE_ROW: {
	modifiedSelection = modifiedSelection
    + <providerRelationClassName(contract,relation)>.Cols.ID + " = "
		+ uri.getLastPathSegment();
}
case <relation.name.cobra>_ALL_ROWS: {
  return query(uri, <providerRelationClassName(contract,relation)>.TABLE_NAME,
		projection, modifiedSelection, selectionArgs, sortOrder);
}
>>


createUpsertForRelations(relation) ::= <<
case <relation.name.cobra>_ALL_ROWS: {
  final ContentValues values = <providerRelationClassName(contract,relation)>.initializeWithDefault(assignedValues);
  values.remove(<providerRelationClassName(contract,relation)>.Cols.ID);

<if(relation.keyMap.update)>
  final List\<String> selectArgsList = new ArrayList\<String>();
  for (String item : <providerRelationClassName(contract,relation)>.UPDATE_KEY_COLUMNS) {
     selectArgsList.add(values.getAsString(item));
  }
  final String[] selectArgs = selectArgsList.toArray(new String[0]);

  final long rowID;
  final int count = mDB.update(<providerRelationClassName(contract,relation)>.TABLE_NAME, values,
        <providerRelationClassName(contract,relation)>.UPDATE_KEY_CLAUSE, selectArgs);
  if ( count \< 1 ) {
     rowID = mDB.insert(<providerRelationClassName(contract,relation)>.TABLE_NAME, values);
     if (rowID \< 1) {
        throw new SQLiteException("Failed to insert row into " + uri);
     }
  }
  else {
     final Cursor cursor = mDB.query(<providerRelationClassName(contract,relation)>.TABLE_NAME, null,
         <providerRelationClassName(contract,relation)>.UPDATE_KEY_CLAUSE, selectArgs, null);
     cursor.moveToFirst();
     rowID = cursor.getInt(cursor.getColumnIndex(BaseColumns._ID));
     cursor.close();
  }
<else>
  final long rowID = mDB.insert(<providerRelationClassName(contract,relation)>.TABLE_NAME, values);
  if (rowID \< 0) {
    logger.debug( "insert didn't work, return of -1");
    return null;
  }
<endif>
  final Uri insertedID = ContentUris.withAppendedId( <relation.name.cobra>_CONTENT_URI, rowID);
		getContext().getContentResolver().notifyChange(insertedID, null);
		return ContentUris.withAppendedId(<relation.name.cobra>_CONTENT_URI, rowID);
	}
>>


createDeleteforRelations(relation) ::= <<
case <relation.name.cobra>_SINGLE_ROW:
	whereClause = whereClause
      + <providerRelationClassName(contract,relation)>.Cols.ID + " = "
			+ uri.getLastPathSegment();
	// no break here on purpose
case <relation.name.cobra>_ALL_ROWS: {
	return deleteAndNotify(uri,
      <providerRelationClassName(contract,relation)>.TABLE_NAME, whereClause,
			whereArgs);
}
>>




createUpdateForRelations(relation) ::= <<
case <relation.name.cobra>_SINGLE_ROW:
	whereClause = whereClause
          + <providerRelationClassName(contract,relation)>.Cols.ID + " = "
		      + uri.getLastPathSegment();
case <relation.name.cobra>_ALL_ROWS: {
	return updateAndNotify(uri,
      <providerRelationClassName(contract,relation)>.TABLE_NAME, values,
			whereClause, whereArgs);

}
>>

package(contract) ::= "<contract.root.sponsor.base>.<contract.root.name.camel>.provider"
providerRelationClassName(contract,relation) ::= <%
<providerClassName(contract)>.<relation.name.bactrian>
%>

providerClassName(contract) ::= <%
<contract.root.name.bactrian>Schema
%>
