import "dataTypeMaps.stg"

PATH(delimiter, directory, paths, contract, isSkeleton, item) ::= <%
<directory.path><delimiter>
<paths.src_main_java><delimiter>
<contract.root.sponsor.path><delimiter>
<contract.root.name.camel><delimiter>
ui<delimiter>
<item.name.camel><delimiter>
Create<item.name.bactrian>Fragment.java
%>


SKELETON(contract,item) ::= <<
>>

BODY(contract,item) ::= <<
// ST:BODY:start
package <package(contract,item)>;

import android.app.Activity;
import android.graphics.Color;
import android.os.Bundle;
import android.os.RemoteException;
import android.support.v4.app.Fragment;
import android.text.Editable;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.Button;

<item.dataTypes: {dataType | <androidCreateDefaultViewTypeImportMap.(dataType)> }; separator="\n">

import <contract.root.sponsor.base>.<contract.root.name.camel>.R;
import <contract.root.sponsor.base>.<contract.root.name.camel>.orm.<item.name.bactrian>Data;
import <contract.root.sponsor.base>.<contract.root.name.camel>.orm.<contract.root.name.bactrian>Resolver;

public class Create<item.name.bactrian>Fragment extends Fragment {

    public final static String LOG_TAG = Create<item.name.bactrian>Fragment.class
            .getCanonicalName();

    // EditText(s) used
 
    // ST:uiCreateDisplayFieldDeclarationTemplate:start
    <item.fields: { field | <uiCreateDisplayFieldDeclarationTemplate(item, field)> }; separator="\n">
    // ST:uiCreateDisplayFieldDeclarationTemplate:end 

    Button buttonCreate;
    Button buttonClear;
    Button buttonCancel;

    // int index;
    OnOpenWindowInterface mOpener;
    <contract.root.name.bactrian>Resolver resolver;

    public final static String LOCATION = "<item.name.camel>";

    
     // listener to button presses.
    // TODO determine/label pattern.
    OnClickListener myOnClickListener = new OnClickListener() {
        @Override
        public void onClick(View v) {
            switch (v.getId()) {
            case R.id.<item.name.snake>_create_button_save:
                doSaveButtonClick();
                break;
            case R.id.<item.name.snake>_create_button_reset:
                doResetButtonClick();
                break;
            case R.id.<item.name.snake>_create_button_cancel:
                doCancelButtonClick();
                break;
            default:
                break;
            }
        }
    };
    
    void doSaveButtonClick() {}
    
    void doCancelButtonClick(){}
    void doResetButtonClick(){}
    
    public static Create<item.name.bactrian>Fragment newInstance() {
        Create<item.name.bactrian>Fragment f = new Create<item.name.bactrian>Fragment();
        return f;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setRetainInstance(true);

    }

    @Override
    public void onAttach(Activity activity) {
        // TODO Auto-generated method stub
        super.onAttach(activity);
        try {
            mOpener = (OnOpenWindowInterface) activity;
            resolver = new <contract.root.name.bactrian>Resolver(activity);
        } catch (ClassCastException e) {
            throw new ClassCastException(activity.toString()
                    + " must implement OnOpenWindowListener");
        }
    }

    @Override
    public void onDetach() {
        mOpener = null;
        resolver = null;
        super.onDetach();
    }

    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);

        // Get the EditTexts
        // ST:uiCreateDisplayFieldLinkToXmlTemplate:start
        <item.fields: { field | <uiCreateDisplayFieldLinkToXmlTemplate(item,field)> }; separator="\n">
        // ST:uiCreateDisplayFieldLinkToXmlTemplate:end 

        buttonClear = (Button) getView().findViewById(
                R.id.<item.name.snake>_create_button_reset);
        buttonCancel = (Button) getView().findViewById(
                R.id.<item.name.snake>_create_button_cancel);
        buttonCreate = (Button) getView().findViewById(
                R.id.<item.name.snake>_create_button_save);

        buttonClear.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
            // ST:uiCreateDisplayFieldViewToDefaultTemplate:start
            <item.fields: { field | <uiCreateDisplayFieldViewToDefaultTemplate(item,field)> }; separator="\n">
            // ST:uiCreateDisplayFieldViewToDefaultTemplate:end 
            }
        });

        buttonCancel.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                if (getResources().getBoolean(R.bool.isTablet) == true) {
                    // put
                    mOpener.openView<item.name.bactrian>Fragment(0);
                } else {
                    getActivity().finish(); // same as hitting 'back' button
                }
            }
        });

        buttonCreate.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                // local Editables
                // ST:uiCreateGetValuesFromViewsTemplate:start
                <item.fields: { field | <uiCreateGetValuesFromViewsTemplate(item,field)> }; separator="\n">
                // ST:uiCreateGetValuesFromViewsTemplate:end 

                // ST:uiCreateJavaFieldDeclarationAndInitializationTemplate:start
                <item.fields: { field | <uiCreateJavaFieldDeclarationAndInitializationTemplate(item,field)> }; separator="\n">
                // ST:uiCreateJavaFieldDeclarationAndInitializationTemplate:end 
                
                // pull values from Editables
                // ST:uiCreateConvertValuesFromViewsToJavaTemplate:start
                <item.fields: { field | <uiCreateConvertValuesFromViewsToJavaTemplate(item,field)> }; separator="\n">
                // ST:uiCreateConvertValuesFromViewsToJavaTemplate:end 
               
                // new <item.name.bactrian>Data object with above info
                <item.name.bactrian>Data newData = new <item.name.bactrian>Data(-1, 
                // -1 row index, because there is no way to know which row it will go into
                // ST:uiCreateOrmConstructorFieldNameTemplate:start
                <item.fields: { field | <uiCreateOrmConstructorFieldNameTemplate(item,field)> }; separator=",\n">
                // ST:uiCreateOrmConstructorFieldNameTemplate:end 
                );
                
                // insert it through Resolver to be put into ContentProvider
                try {
                    resolver.insert(newData);
                } catch (RemoteException e) {
                    Log.e(LOG_TAG,
                            "Caught RemoteException => " + e.getMessage());
                    e.printStackTrace();
                }
                // return back to proper state
                if (getResources().getBoolean(R.bool.isTablet) == true) {
                    // put
                    mOpener.openView<item.name.bactrian>Fragment(0);
                } else {
                    getActivity().finish(); // same as hitting 'back' button
                }
            }
        });

    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
            Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.<item.name.snake>_creation_fragment,
                container, false);
        container.setBackgroundColor(Color.CYAN);
        return view;
    }

}
// ST:BODY:end
>>

package(contract,item) ::= <%
<contract.root.sponsor.base>.<contract.root.name.camel>.ui.<item.name.camel>
%>

