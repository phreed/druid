import "dataTypeMaps.stg"

PATH(delimiter, directory, paths, contract, isSkeleton, item) ::= <%
<directory.path><delimiter>
<paths.src_main_java><delimiter>
<contract.root.sponsor.path><delimiter>
<contract.root.name.camel><delimiter>
ui<delimiter>
<item.name.camel><delimiter>
Create<item.name.bactrian>Fragment.java
%>


SKELETON(contract,item) ::= <<
>>

BODY(contract,item) ::= <<
// ST:BODY:start
package <package(contract,item)>;

import android.app.Activity;
import android.graphics.Color;
import android.os.Bundle;
import android.os.RemoteException;
import android.support.v4.app.Fragment;
import android.text.Editable;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.Button;

<item.DataTypesUsed: {dataType | <androidCreateDefaultViewTypeImportMap.(dataType)> }; separator="\n">

import <contract.root.sponsor.base>.<contract.root.name.camel>.R;
import <contract.root.sponsor.base>.<contract.root.name.camel>.orm.<item.name.bactrian>Data;
import <contract.root.sponsor.base>.<contract.root.name.camel>.orm.<contract.root.name.bactrian>Resolver;

public class Create<item.name.bactrian>Fragment extends Fragment {

    public final static String LOG_TAG = Create<item.name.bactrian>Fragment.class
            .getCanonicalName();

    // EditText(s) used
 
    // ST:uiCreateDisplayFieldDeclarationTemplate:start
    <item.fields: { field | <uiCreateDisplayFieldDeclarationTemplate(item, field)> }; separator="\n">
    // ST:uiCreateDisplayFieldDeclarationTemplate:end 

    Button buttonCreate;
    Button buttonClear;
    Button buttonCancel;

    // int index;
    OnOpenWindowInterface mOpener;
    <contract.root.name.bactrian>Resolver resolver;

    public final static String LOCATION = "<item.name.camel>";

    
     // listener to button presses.
    // TODO determine/label pattern.
    OnClickListener myOnClickListener = new OnClickListener() {
        @Override
        public void onClick(View v) {
            switch (v.getId()) {
            case R.id.<item.name.snake>_create_button_save:
                doSaveButtonClick();
                break;
            case R.id.<item.name.snake>_create_button_reset:
                doResetButtonClick();
                break;
            case R.id.<item.name.snake>_create_button_cancel:
                doCancelButtonClick();
                break;
            default:
                break;
            }
        }
    };
    
    void doSaveButtonClick() {}
    
    void doCancelButtonClick(){}
    void doResetButtonClick(){}
    
    public static Create<item.name.bactrian>Fragment newInstance() {
        Create<item.name.bactrian>Fragment f = new Create<item.name.bactrian>Fragment();
        return f;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setRetainInstance(true);

    }

    @Override
    public void onAttach(Activity activity) {
        // TODO Auto-generated method stub
        super.onAttach(activity);
        try {
            mOpener = (OnOpenWindowInterface) activity;
            resolver = new <contract.root.name.bactrian>Resolver(activity);
        } catch (ClassCastException e) {
            throw new ClassCastException(activity.toString()
                    + " must implement OnOpenWindowListener");
        }
    }

    @Override
    public void onDetach() {
        mOpener = null;
        resolver = null;
        super.onDetach();
    }

    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);

        // Get the EditTexts
        // ST:uiCreateDisplayFieldLinkToXmlTemplate:start
        <item.fields: { field | <uiCreateDisplayFieldLinkToXmlTemplate(item,field)> }; separator="\n">
        // ST:uiCreateDisplayFieldLinkToXmlTemplate:end 

        buttonClear = (Button) getView().findViewById(
                R.id.<item.name.snake>_create_button_reset);
        buttonCancel = (Button) getView().findViewById(
                R.id.<item.name.snake>_create_button_cancel);
        buttonCreate = (Button) getView().findViewById(
                R.id.<item.name.snake>_create_button_save);

        buttonClear.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
            // ST:uiCreateDisplayFieldViewToDefaultTemplate:start
            <item.fields: { field | <uiCreateDisplayFieldViewToDefaultTemplate(item,field)> }; separator="\n">
            // ST:uiCreateDisplayFieldViewToDefaultTemplate:end 
            }
        });

        buttonCancel.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                if (getResources().getBoolean(R.bool.isTablet) == true) {
                    // put
                    mOpener.openView<item.name.bactrian>Fragment(0);
                } else {
                    getActivity().finish(); // same as hitting 'back' button
                }
            }
        });

        buttonCreate.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                // local Editables
                // ST:uiCreateGetValuesFromViewsTemplate:start
                <item.fields: { field | <uiCreateGetValuesFromViewsTemplate(item,field)> }; separator="\n">
                // ST:uiCreateGetValuesFromViewsTemplate:end 

                // ST:uiCreateJavaFieldDeclarationAndInitializationTemplate:start
                <item.fields: { field | <uiCreateJavaFieldDeclarationAndInitializationTemplate(item,field)> }; separator="\n">
                // ST:uiCreateJavaFieldDeclarationAndInitializationTemplate:end 
                
                // pull values from Editables
                // ST:uiCreateConvertValuesFromViewsToJavaTemplate:start
                <item.fields: { field | <uiCreateConvertValuesFromViewsToJavaTemplate(item,field)> }; separator="\n">
                // ST:uiCreateConvertValuesFromViewsToJavaTemplate:end 
               
                // new <item.name.bactrian>Data object with above info
                <item.name.bactrian>Data newData = new <item.name.bactrian>Data(-1, 
                // -1 row index, because there is no way to know which row it will go into
                // ST:uiCreateOrmConstructorFieldNameTemplate:start
                <item.fields: { field | <uiCreateOrmConstructorFieldNameTemplate(item,field)> }; separator=",\n">
                // ST:uiCreateOrmConstructorFieldNameTemplate:end 
                );
                
                // insert it through Resolver to be put into ContentProvider
                try {
                    resolver.insert(newData);
                } catch (RemoteException e) {
                    Log.e(LOG_TAG,
                            "Caught RemoteException => " + e.getMessage());
                    e.printStackTrace();
                }
                // return back to proper state
                if (getResources().getBoolean(R.bool.isTablet) == true) {
                    // put
                    mOpener.openView<item.name.bactrian>Fragment(0);
                } else {
                    getActivity().finish(); // same as hitting 'back' button
                }
            }
        });

    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
            Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.<item.name.snake>_creation_fragment,
                container, false);
        container.setBackgroundColor(Color.CYAN);
        return view;
    }

}
// ST:BODY:end
>>

package(contract,item) ::= <%
<contract.root.sponsor.base>.<contract.root.name.camel>.ui.<item.name.camel>
%>


androidCreateDefaultViewTypeImportMap ::= [
        "SERIAL":"import android.widget.EditText;",
        "FK"    :"import android.widget.EditText;",
        "EXCLUSIVE"  :"import android.widget.EditText;",
        "INCLUSIVE"  :"import android.widget.EditText;",
        "SHORT":"import android.widget.EditText;",
        "INTEGER":"import android.widget.EditText;",
        "BOOL"  :"import android.widget.ToggleButton;",
        "LONG"  :"import android.widget.EditText;",
        "TIMESTAMP":"import android.widget.EditText;",
        "REAL"  :"import android.widget.EditText;",
        "GUID"  :"import android.widget.EditText;",
        "TEXT"  :"import android.widget.EditText;",
        "BLOB"  :"",
        "FILE"  :"import android.widget.EditText;",
        "TYPE"  :"import android.widget.EditText;",
        "FLOAT"  :"import android.widget.EditText;",
        "DOUBLE":"import android.widget.EditText;",
        default: key
]


uiCreateGetValuesFromViewsTemplate(relation,field) ::= <%
<(uiCreateGetValuesFromViewsMap.(field.dtype))(relation,field) >
%>
uiCreateGetValuesFromViewsMap ::= [ 
   "INTEGER"   : "uiCreateGetValuesFromViewsDefaultTemplate",
   "REAL"      : "uiCreateGetValuesFromViewsDefaultTemplate",
   "GUID"      : "uiCreateGetValuesFromViewsDefaultTemplate",
   "BLOB"      : "uiCreateGetValuesFromViewsBLOB",
   "INCLUSIVE" : "uiCreateGetValuesFromViewsDefaultTemplate",
   "BOOL"      : "uiCreateGetValuesFromViewsBOOL",
   "DOUBLE"    : "uiCreateGetValuesFromViewsDefaultTemplate",
   "SHORT"     : "uiCreateGetValuesFromViewsDefaultTemplate",
   "FLOAT"     : "uiCreateGetValuesFromViewsDefaultTemplate",
   "EXCLUSIVE" : "uiCreateGetValuesFromViewsDefaultTemplate",
   "TEXT"      : "uiCreateGetValuesFromViewsDefaultTemplate",
   "FK"        : "uiCreateGetValuesFromViewsDefaultTemplate",
   "FILE"      : "uiCreateGetValuesFromViewsDefaultTemplate",
   "LONG"      : "uiCreateGetValuesFromViewsDefaultTemplate",
   "SERIAL"    : "uiCreateGetValuesFromViewsDefaultTemplate",
   "TIMESTAMP" : "uiCreateGetValuesFromViewsDefaultTemplate",
   "TYPE"      : "uiCreateGetValuesFromViewsDefaultTemplate", 
   default: key
]
uiCreateGetValuesFromViewsDefaultTemplate(relation,field) ::= <%
Editable <field.name.camel>Createable = <field.name.camel>ET.getText();
%>
uiCreateGetValuesFromViewsBLOB(relation,field) ::= <%
// <field.name.snake> omitted, BLOB dataType, unable to generate a reasonable UI in an automated way
%> 
uiCreateGetValuesFromViewsBOOL(relation,field) ::= <% 
// <field.name.snake> omitted, BOOL dataType, no need for this step.
%> 


uiCreateDisplayFieldViewToDefaultTemplate(relation,field) ::= <%
<(uiCreateDisplayFieldViewToDefaultMap.(field.dtype))(relation,field) >
%>
uiCreateDisplayFieldViewToDefaultMap ::= [ 
   "INTEGER"   : "uiCreateDisplayFieldViewToDefaultDefaultTemplate",
   "REAL"      : "uiCreateDisplayFieldViewToDefaultDefaultTemplate",
   "GUID"      : "uiCreateDisplayFieldViewToDefaultDefaultTemplate",
   "BLOB"      : "uiCreateDisplayFieldViewToDefaultBLOB",
   "INCLUSIVE" : "uiCreateDisplayFieldViewToDefaultDefaultTemplate",
   "BOOL"      : "uiCreateDisplayFieldViewToDefaultBOOL",
   "DOUBLE"    : "uiCreateDisplayFieldViewToDefaultDefaultTemplate",
   "SHORT"     : "uiCreateDisplayFieldViewToDefaultDefaultTemplate",
   "FLOAT"     : "uiCreateDisplayFieldViewToDefaultDefaultTemplate",
   "EXCLUSIVE" : "uiCreateDisplayFieldViewToDefaultDefaultTemplate",
   "TEXT"      : "uiCreateDisplayFieldViewToDefaultDefaultTemplate",
   "FK"        : "uiCreateDisplayFieldViewToDefaultDefaultTemplate",
   "FILE"      : "uiCreateDisplayFieldViewToDefaultDefaultTemplate",
   "LONG"      : "uiCreateDisplayFieldViewToDefaultDefaultTemplate",
   "SERIAL"    : "uiCreateDisplayFieldViewToDefaultDefaultTemplate",
   "TIMESTAMP" : "uiCreateDisplayFieldViewToDefaultDefaultTemplate",
   "TYPE"      : "uiCreateDisplayFieldViewToDefaultDefaultTemplate", 
   default: key
]
uiCreateDisplayFieldViewToDefaultDefaultTemplate(relation,field) ::= <%
<field.name.camel>ET.setText(""+ <javaTypeDefaultMap.(field.dtype)>);
%>
uiCreateDisplayFieldViewToDefaultBLOB(relation,field) ::= <%
// <field.name.snake> omitted, BLOB dataType, unable to generate a reasonable UI in an automated way 
%>
uiCreateDisplayFieldViewToDefaultBOOL(relation,field) ::= <% 
<field.name.camel>TB.setPressed(false);
%> 



uiCreateDisplayFieldDeclarationTemplate(relation,field) ::= <%
<(uiCreateDisplayFieldDeclarationMap.(field.dtype))(relation,field) >
%>
uiCreateDisplayFieldDeclarationMap ::= [ 
   "INTEGER"   : "uiCreateDisplayFieldDeclarationDefaultTemplate",
   "REAL"      : "uiCreateDisplayFieldDeclarationDefaultTemplate",
   "GUID"      : "uiCreateDisplayFieldDeclarationDefaultTemplate",
   "BLOB"      : "uiCreateDisplayFieldDeclarationBLOB",
   "INCLUSIVE" : "uiCreateDisplayFieldDeclarationDefaultTemplate",
   "BOOL"      : "uiCreateDisplayFieldDeclarationBOOL",
   "DOUBLE"    : "uiCreateDisplayFieldDeclarationDefaultTemplate",
   "SHORT"     : "uiCreateDisplayFieldDeclarationDefaultTemplate",
   "FLOAT"     : "uiCreateDisplayFieldDeclarationDefaultTemplate",
   "EXCLUSIVE" : "uiCreateDisplayFieldDeclarationDefaultTemplate",
   "TEXT"      : "uiCreateDisplayFieldDeclarationDefaultTemplate",
   "FK"        : "uiCreateDisplayFieldDeclarationDefaultTemplate",
   "FILE"      : "uiCreateDisplayFieldDeclarationDefaultTemplate",
   "LONG"      : "uiCreateDisplayFieldDeclarationDefaultTemplate",
   "SERIAL"    : "uiCreateDisplayFieldDeclarationDefaultTemplate",
   "TIMESTAMP" : "uiCreateDisplayFieldDeclarationDefaultTemplate",
   "TYPE"      : "uiCreateDisplayFieldDeclarationDefaultTemplate", 
   default: key
]
uiCreateDisplayFieldDeclarationDefaultTemplate(relation,field) ::= <<
EditText <field.name.camel>ET;
>>
uiCreateDisplayFieldDeclarationBLOB(relation,field) ::= <%
// <field.name.snake> omitted, BLOB dataType, unable to generate a reasonable UI in an automated way
%>
uiCreateDisplayFieldDeclarationBOOL(relation,field) ::= <% 
ToggleButton <field.name.camel>TB;
%> 


uiCreateJavaFieldDeclarationAndInitializationTemplate(relation,field) ::= <%
<(uiCreateJavaFieldDeclarationAndInitializationMap.(field.dtype))(relation,field) >
%>
uiCreateJavaFieldDeclarationAndInitializationMap ::= [ 
   "INTEGER"   : "uiCreateJavaFieldDeclarationAndInitializationDefaultTemplate",
   "REAL"      : "uiCreateJavaFieldDeclarationAndInitializationDefaultTemplate",
   "GUID"      : "uiCreateJavaFieldDeclarationAndInitializationDefaultTemplate",
   "BLOB"      : "uiCreateJavaFieldDeclarationAndInitializationBLOB",
   "INCLUSIVE" : "uiCreateJavaFieldDeclarationAndInitializationDefaultTemplate",
   "BOOL"      : "uiCreateJavaFieldDeclarationAndInitializationDefaultTemplate",
   "DOUBLE"    : "uiCreateJavaFieldDeclarationAndInitializationDefaultTemplate",
   "SHORT"     : "uiCreateJavaFieldDeclarationAndInitializationDefaultTemplate",
   "FLOAT"     : "uiCreateJavaFieldDeclarationAndInitializationDefaultTemplate",
   "EXCLUSIVE" : "uiCreateJavaFieldDeclarationAndInitializationDefaultTemplate",
   "TEXT"      : "uiCreateJavaFieldDeclarationAndInitializationDefaultTemplate",
   "FK"        : "uiCreateJavaFieldDeclarationAndInitializationDefaultTemplate",
   "FILE"      : "uiCreateJavaFieldDeclarationAndInitializationDefaultTemplate",
   "LONG"      : "uiCreateJavaFieldDeclarationAndInitializationDefaultTemplate",
   "SERIAL"    : "uiCreateJavaFieldDeclarationAndInitializationDefaultTemplate",
   "TIMESTAMP" : "uiCreateJavaFieldDeclarationAndInitializationDefaultTemplate",
   "TYPE"      : "uiCreateJavaFieldDeclarationAndInitializationDefaultTemplate", 
   default: key
]
uiCreateJavaFieldDeclarationAndInitializationDefaultTemplate(relation,field) ::= <%
<javaTypeMap.(field.dtype)> <field.name.camel> = <javaTypeDefaultMap.(field.dtype)>;
%>
uiCreateJavaFieldDeclarationAndInitializationBLOB(relation,field) ::= <%
// <field.name.snake> omitted, BLOB dataType, unable to generate a reasonable UI in an automated way
%>



uiCreateOrmConstructorFieldNameTemplate(relation,field) ::= <%
<(uiCreateOrmConstructorFieldNameMap.(field.dtype))(relation,field) >
%>
uiCreateOrmConstructorFieldNameMap ::= [ 
   "INTEGER"   : "uiCreateOrmConstructorFieldNameDefaultTemplate",
   "REAL"      : "uiCreateOrmConstructorFieldNameDefaultTemplate",
   "GUID"      : "uiCreateOrmConstructorFieldNameDefaultTemplate",
   "BLOB"      : "uiCreateOrmConstructorFieldNameBLOB",
   "INCLUSIVE" : "uiCreateOrmConstructorFieldNameDefaultTemplate",
   "BOOL"      : "uiCreateOrmConstructorFieldNameDefaultTemplate",
   "DOUBLE"    : "uiCreateOrmConstructorFieldNameDefaultTemplate",
   "SHORT"     : "uiCreateOrmConstructorFieldNameDefaultTemplate",
   "FLOAT"     : "uiCreateOrmConstructorFieldNameDefaultTemplate",
   "EXCLUSIVE" : "uiCreateOrmConstructorFieldNameDefaultTemplate",
   "TEXT"      : "uiCreateOrmConstructorFieldNameDefaultTemplate",
   "FK"        : "uiCreateOrmConstructorFieldNameDefaultTemplate",
   "FILE"      : "uiCreateOrmConstructorFieldNameDefaultTemplate",
   "LONG"      : "uiCreateOrmConstructorFieldNameDefaultTemplate",
   "SERIAL"    : "uiCreateOrmConstructorFieldNameDefaultTemplate",
   "TIMESTAMP" : "uiCreateOrmConstructorFieldNameDefaultTemplate",
   "TYPE"      : "uiCreateOrmConstructorFieldNameDefaultTemplate", 
   default: key
]
uiCreateOrmConstructorFieldNameDefaultTemplate(relation,field) ::= <%
<field.name.camel>
%>
uiCreateOrmConstructorFieldNameBLOB(relation,field) ::= <%
null, // BLOB dataType, unable to generate a reasonable UI in an automated way
%>



uiCreateDisplayFieldLinkToXmlTemplate(relation,field) ::= <%
<(uiCreateDisplayFieldLinkToXmlMap.(field.dtype))(relation,field) >
%>
uiCreateDisplayFieldLinkToXmlMap ::= [ 
   "INTEGER"   : "uiCreateDisplayFieldLinkToXmlDefaultTemplate",
   "REAL"      : "uiCreateDisplayFieldLinkToXmlDefaultTemplate",
   "GUID"      : "uiCreateDisplayFieldLinkToXmlDefaultTemplate",
   "BLOB"      : "uiCreateDisplayFieldLinkToXmlBLOB",
   "INCLUSIVE" : "uiCreateDisplayFieldLinkToXmlDefaultTemplate",
   "BOOL"      : "uiCreateDisplayFieldLinkToXmlBOOL",
   "DOUBLE"    : "uiCreateDisplayFieldLinkToXmlDefaultTemplate",
   "SHORT"     : "uiCreateDisplayFieldLinkToXmlDefaultTemplate",
   "FLOAT"     : "uiCreateDisplayFieldLinkToXmlDefaultTemplate",
   "EXCLUSIVE" : "uiCreateDisplayFieldLinkToXmlDefaultTemplate",
   "TEXT"      : "uiCreateDisplayFieldLinkToXmlDefaultTemplate",
   "FK"        : "uiCreateDisplayFieldLinkToXmlDefaultTemplate",
   "FILE"      : "uiCreateDisplayFieldLinkToXmlDefaultTemplate",
   "LONG"      : "uiCreateDisplayFieldLinkToXmlDefaultTemplate",
   "SERIAL"    : "uiCreateDisplayFieldLinkToXmlDefaultTemplate",
   "TIMESTAMP" : "uiCreateDisplayFieldLinkToXmlDefaultTemplate",
   "TYPE"      : "uiCreateDisplayFieldLinkToXmlDefaultTemplate", 
   default: key
]
uiCreateDisplayFieldLinkToXmlDefaultTemplate(relation,field) ::= <%
<field.name.camel>ET = (EditText) getView().findViewById(R.id.<relation.name.snake>_create_value_<field.name.snake>);
%>
uiCreateDisplayFieldLinkToXmlBOOL(relation,field) ::= <% 
<field.name.camel>TB = (ToggleButton) getView().findViewById(R.id.<relation.name.snake>_create_value_<field.name.snake>);
%> 
uiCreateDisplayFieldLinkToXmlBLOB(relation,field) ::= <%
// <field.name.snake> omitted, BLOB dataType, unable to generate a reasonable UI in an automated way
%>



uiCreateSetDisplayViewFromOrmObjectTemplate(relation,field) ::= <%
<(uiCreateSetDisplayViewFromOrmObjectMap.(field.dtype))(relation,field) >
%>
uiCreateSetDisplayViewFromOrmObjectMap ::= [ 
   "INTEGER"   : "uiCreateSetDisplayViewFromOrmObjectDefaultTemplate",
   "REAL"      : "uiCreateSetDisplayViewFromOrmObjectDefaultTemplate",
   "GUID"      : "uiCreateSetDisplayViewFromOrmObjectDefaultTemplate",
   "BLOB"      : "uiCreateSetDisplayViewFromOrmObjectBLOB",
   "INCLUSIVE" : "uiCreateSetDisplayViewFromOrmObjectDefaultTemplate",
   "BOOL"      : "uiCreateSetDisplayViewFromOrmObjectDefaultTemplate",
   "DOUBLE"    : "uiCreateSetDisplayViewFromOrmObjectDefaultTemplate",
   "SHORT"     : "uiCreateSetDisplayViewFromOrmObjectDefaultTemplate",
   "FLOAT"     : "uiCreateSetDisplayViewFromOrmObjectDefaultTemplate",
   "EXCLUSIVE" : "uiCreateSetDisplayViewFromOrmObjectDefaultTemplate",
   "TEXT"      : "uiCreateSetDisplayViewFromOrmObjectDefaultTemplate",
   "FK"        : "uiCreateSetDisplayViewFromOrmObjectDefaultTemplate",
   "FILE"      : "uiCreateSetDisplayViewFromOrmObjectDefaultTemplate",
   "LONG"      : "uiCreateSetDisplayViewFromOrmObjectDefaultTemplate",
   "SERIAL"    : "uiCreateSetDisplayViewFromOrmObjectDefaultTemplate",
   "TIMESTAMP" : "uiCreateSetDisplayViewFromOrmObjectDefaultTemplate",
   "TYPE"      : "uiCreateSetDisplayViewFromOrmObjectDefaultTemplate", 
   default: key
]
uiCreateSetDisplayViewFromOrmObjectDefaultTemplate(relation,field) ::= <<
<field.name.camel>ET.setText(<javaMethodTypeMap.(field.dtype)>.valueOf( <relation.name.camel>Data.<field.name.camel>).toString());
>>
uiCreateSetDisplayViewFromOrmObjectBLOB(relation,field) ::= <%
// <field.name.snake> omitted, BLOB dataType, unable to generate a reasonable UI in an automated way
%>



uiCreateConvertValuesFromViewsToJavaTemplate(relation,field) ::= <%
<(uiCreateConvertValuesFromViewsToJavaMap.(field.dtype))(relation,field) >
%>
uiCreateConvertValuesFromViewsToJavaMap ::= [ 
   "INTEGER"   : "uiCreateConvertValuesFromViewsToJavaDefaultTemplate",
   "REAL"      : "uiCreateConvertValuesFromViewsToJavaDefaultTemplate",
   "GUID"      : "uiCreateConvertValuesFromViewsToJavaDefaultTemplate",
   "BLOB"      : "uiCreateConvertValuesFromViewsToJavaBLOB",
   "INCLUSIVE" : "uiCreateConvertValuesFromViewsToJavaDefaultTemplate",
   "BOOL"      : "uiCreateConvertValuesFromViewsToJavaBOOL",
   "DOUBLE"    : "uiCreateConvertValuesFromViewsToJavaDefaultTemplate",
   "SHORT"     : "uiCreateConvertValuesFromViewsToJavaDefaultTemplate",
   "FLOAT"     : "uiCreateConvertValuesFromViewsToJavaDefaultTemplate",
   "EXCLUSIVE" : "uiCreateConvertValuesFromViewsToJavaDefaultTemplate",
   "TEXT"      : "uiCreateConvertValuesFromViewsToJavaDefaultTemplate",
   "FK"        : "uiCreateConvertValuesFromViewsToJavaDefaultTemplate",
   "FILE"      : "uiCreateConvertValuesFromViewsToJavaDefaultTemplate",
   "LONG"      : "uiCreateConvertValuesFromViewsToJavaDefaultTemplate",
   "SERIAL"    : "uiCreateConvertValuesFromViewsToJavaDefaultTemplate",
   "TIMESTAMP" : "uiCreateConvertValuesFromViewsToJavaDefaultTemplate",
   "TYPE"      : "uiCreateConvertValuesFromViewsToJavaDefaultTemplate", 
   default: key
]
uiCreateConvertValuesFromViewsToJavaDefaultTemplate(relation,field) ::= <<
<field.name.camel> = <javaMethodTypeMap.(field.dtype)>.valueOf(<field.name.camel>Createable.toString());
>>
uiCreateConvertValuesFromViewsToJavaBLOB(relation,field) ::= <%
// <field.name.snake> omitted, BLOB dataType, unable to generate a reasonable UI in an automated way
%>
uiCreateConvertValuesFromViewsToJavaBOOL(relation,field) ::= <% 
<field.name.camel> = <field.name.camel>TB.isChecked();
%> 