import "dataTypeMaps.stg"

PATH(delimiter, directory, contract, isSkeleton, item) ::= <%
<directory.path><delimiter>
src<delimiter>
<contract.root.sponsor.path><delimiter>
<contract.root.name.camel><delimiter>
provider<delimiter>
<contract.root.name.bactrian>ContentDescriptor.java
%>

SKELETON(contract) ::= <<
>>

BODY(contract) ::= <<
// ST:BODY:start

package <package(contract)>;

import android.content.UriMatcher;
import android.net.Uri;
import android.provider.BaseColumns;

/**
 * @author Michael A. Walker
 *         \<p>
 *         based on the work by Vladimir Vivien (http://vladimirvivien.com/),
 *         which provides a very logical organization of the meta-data of the
 *         Database and Content Provider
 *         \<p>
 *         This note might be moved to a 'Special Thanks' section once one is
 *         created and moved out of future test code.
 */
public class <contract.root.name.bactrian>ContentDescriptor 
   extends <contract.root.name.bactrian>ContentDescriptorBase {

<if(contract.mode.isAmmo)>
  public enum Disposition {
       LOCAL(1),
       REMOTE(2);
       final public int code;
       private Disposition(int code) { this.code = code; }
  };
<endif>


  /**
   * Project Related Constants
   */

  public static final String ORGANIZATIONAL_NAME = "<contract.root.sponsor>";
  public static final String PROJECT_NAME = "<contract.root.name.snake>";
  public static final String PROVIDER_NAME = "<contract.root.name.snake>provider";

  /**
   * ConentProvider Related Constants
   */
  public static final String AUTHORITY = ORGANIZATIONAL_NAME + "."
      + PROJECT_NAME + "." + PROVIDER_NAME;
  private static final Uri BASE_URI = Uri.parse("content://" + AUTHORITY);
  public static final UriMatcher URI_MATCHER = buildUriMatcher();

  // register identifying URIs for Restaurant entity
  // the TOKEN value is associated with each URI registered
  private static UriMatcher buildUriMatcher() {

    // add default 'no match' result to matcher
    final UriMatcher matcher = new UriMatcher(UriMatcher.NO_MATCH);
     // ST:addMatcherURIs:inline
    <contract.root.relations: { relation | <addMatcherURIs(relation)> }; separator="\n">
        // ST:addMatcherURIs:complete
    return matcher;

  }
  // ST:createRelationMetaData:inline
   <contract.root.relations: { relation | <createRelationMetaData(relation,i)> }; separator="\n">
   // ST:createRelationMetaData:complete
  
}
// ST:BODY:end
>>

package(contract) ::= "<contract.root.sponsor.base>.<contract.root.name.camel>.provider"

addMatcherURIs(relation) ::= <<
// <relation.name.bactrian> URIs
matcher.addURI(AUTHORITY, <relation.name.bactrian>.PATH, <relation.name.bactrian>.PATH_TOKEN);
matcher.addURI(AUTHORITY, <relation.name.bactrian>.PATH_FOR_ID, <relation.name.bactrian>.PATH_FOR_ID_TOKEN);
>>

createRelationMetaData(relation, index) ::= <<
// Define a static class that represents description of stored content
// entity.
public static class <relation.name.bactrian> {
  // an identifying name for entity
  
  public static final String TABLE_NAME = "<relation.name.snake>_table";

  // define a URI paths to access entity
  // BASE_URI/restaurants - for list of locations
  // BASE_URI/restaurants/* - retrieve specific location by id
  // the token value are used to register path in matcher (see above)
  public static final String PATH = "<relation.name.camel>s";
  public static final int PATH_TOKEN = <index>10;
  public static final String PATH_FOR_ID = "<relation.name.camel>/*";
  public static final int PATH_FOR_ID_TOKEN = <index>20;

  // URI for all content stored as Restaurant entity
  public static final Uri CONTENT_URI = BASE_URI.buildUpon().appendPath(PATH).build();

<if(contract.mode.isAmmo)>
        public static final String CONTENT_TOPIC = "ammo/<sponsor>.<name.snake>";
<else>
        public static final String CONTENT_TOPIC = "topic/<sponsor>.<name.snake>";
<endif>

  // TODO figure out why 'db' is here...
  // might have been convention of example code I used previously
  // or might have some actual meaning
  private final static String MIME_TYPE_END = "<relation.name.snake>";

  // define the MIME type of data in the content provider
  public static final String CONTENT_TYPE_DIR = ORGANIZATIONAL_NAME
      + ".cursor.dir/" + ORGANIZATIONAL_NAME + "." + MIME_TYPE_END;
  public static final String CONTENT_ITEM_TYPE = ORGANIZATIONAL_NAME
      + ".cursor.item/" + ORGANIZATIONAL_NAME + "." + MIME_TYPE_END;
        

  // the names and order of ALL columns, including internal use ones
  public static final String[] ALL_COLUMN_NAMES = { Cols.ID,
  // ST:getColumnNames:inline
        <relation.fields: { field | <getColumnNames(field)> }; separator=",\n">
        // ST:getColumnNames:complete
  };

  // a static class to store columns in entity
  public static class Cols {
    public static final String ID = BaseColumns._ID; // convention
<if(contract.mode.isAmmo)>
    public static final String _RECEIVED_DATE = "_received_date"; // when the data was received
    public static final String _DISPOSITION = "_disp"; // where the last update came from 
<endif>
    // The name and column index of each column in your database
    // ST:getColumnDeclaration:inline
    <relation.fields: { field | <getColumnDeclaration(field)> }; separator="\n">
    // ST:getColumnDeclaration:complete
  }
}
>>

getColumnNames(field) ::="Cols.<field.name.cobra>"

getColumnDeclaration(field) ::= <%
public static final String <field.name.cobra> = "<field.name.cobra>";
%>


