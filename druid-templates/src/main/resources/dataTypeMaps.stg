

isFieldTyped ::= [
   "FILE"      : true,
   "BLOB"      : true,
   default     : false
]

isFieldWidetSuppressed ::= [
   "BLOB"      : true,
   default     : false
]

isFieldEnumerable ::= [
        "SERIAL"    : false,
        "FK"        : false,
        "EXCLUSIVE" : false,
        "INCLUSIVE" : false,
        "SHORT"     : true,
        "INTEGER"   : true,
        "BOOL"      : true,
        "LONG"      : true,
        "TIMESTAMP" : false,
        "REAL"      : true,
        "GUID"      : false,
        "TEXT"      : true,
        "BLOB"      : false,
        "FILE"      : false,
        default     : false
]

fieldLiteral(field) ::= <%
<(fieldLiteralMap.(field.dtype))(field)>
%>
fieldLiteralMap ::= [
        "SERIAL":    "fieldLiteralQuoted",
        "FK":        "fieldLiteralUnquoted",
        "EXCLUSIVE": "fieldLiteralEnumerated",
        "INCLUSIVE": "fieldLiteralEnumerated",
        "SHORT":     "fieldLiteralUnquoted",
        "INTEGER":   "fieldLiteralUnquoted",
        "BOOL":      "fieldLiteralUnquoted",
        "LONG":      "fieldLiteralUnquoted",
        "TIMESTAMP": "fieldLiteralUnquoted",
        "REAL":      "fieldLiteralUnquoted",
        "GUID":      "fieldLiteralQuoted",
        "TEXT":      "fieldLiteralQuoted",
        "BLOB":      "fieldLiteralQuoted",
        "FILE":      "fieldLiteralQuoted",
        default:     "fieldLiteralQuoted"
]

fieldLiteralQuoted(field) ::= <%
<if(field.default)>
"<field.default>"
<else>
"<javaTypeDefaultMap.(field.dtype)>"
<endif>
%>
fieldLiteralUnquoted(field) ::= <%
<if(field.default)>
<field.default>
<else>
<javaTypeDefaultMap.(field.dtype)>
<endif>
%>
fieldLiteralEnumerated(field) ::= <%
<field.name.cobra>.<field.default>
%>


javaTypeMap ::= [
        "SERIAL":"String",
        "FK"    :"long",
        "EXCLUSIVE"  :"int",
        "INCLUSIVE"  :"int",
        "SHORT":"short",
        "INTEGER":"int",
        "BOOL"  :"boolean",
        "LONG"  :"long",
        "TIMESTAMP":"long",
        "REAL"  :"double",
        "GUID"  :"String",
        "TEXT"  :"String",
        "BLOB"  :"byte[]",
        "FILE"  :"String",
        "FLOAT" :"float",
        "DOUBLE":"double",
        default: key
]

javaTypeDefaultMap ::= [
        "SERIAL":" \"\" ",
        "FK"    :"0",
        "EXCLUSIVE"  :"0",
        "INCLUSIVE"  :"0",
        "SHORT":"0",
        "INTEGER":"0",
        "BOOL"  :"false",
        "LONG"  :"0",
        "TIMESTAMP":"0",
        "REAL"  :"0",
        "GUID"  :" \"\" ",
        "TEXT"  :" \"\" ",
        "BLOB"  :"null",
        "FILE"  :" \"\" ",
        "FLOAT"  :"0",
        "DOUBLE":"0",
        default: key
]

contentValuesDefaultInitializationMap ::= [
        "SERIAL":" \"\" ",
        "FK"    :"0",
        "EXCLUSIVE"  :"0",
        "INCLUSIVE"  :"0",
        "SHORT":"0",
        "INTEGER":"0",
        "BOOL"  :"false",
        "LONG"  :"0",
        "TIMESTAMP":"0",
        "REAL"  :"0",
        "GUID"  :" \"\" ",
        "TEXT"  :" \"\" ",
        "BLOB"  :"new byte[]{}",
        "FILE"  :" \"\" ",
        "FLOAT"  :"0",
        "DOUBLE":"0",
        default: key
]

androidWriteParcelMethodMap ::= [
        "SERIAL":"writeString",
        "FK"    :"writeLong",
        "EXCLUSIVE"  :"writeInt",
        "INCLUSIVE"  :"writeInt",
        "SHORT":"writeInt",
        "INTEGER":"writeInt",
        "BOOL"  :"writeInt",
        "LONG"  :"writeLong",
        "TIMESTAMP":"writeLong",
        "REAL"  :"writeDouble",
        "GUID"  :"writeString",
        "TEXT"  :"writeString",
        "BLOB"  :"writeByteArray",
        "FILE"  :"writeString",
        "FLOAT"  :"writeFloat",
        "DOUBLE":"writeDouble",
        default: key
]



androidReadFromCursorMethodMap ::= [
        "SERIAL":"getString",
        "FK"    :"getLong",
        "EXCLUSIVE"  :"getInt",
        "INCLUSIVE"  :"getInt",
        "SHORT":"getShort",
        "INTEGER":"getInt",
        "BOOL"  :"getInt",
        "LONG"  :"getLong",
        "TIMESTAMP":"getLong",
        "REAL"  :"getDouble",
        "GUID"  :"getString",
        "TEXT"  :"getString",
        "BLOB"  :"getBlob",
        "FILE"  :"getString",
        "FLOAT"  :"getFloat",
        "DOUBLE":"getDouble",
        default: key
]


javaMethodTypeMap ::= [
        "SERIAL":"String",
        "FK"    :"Long",
        "EXCLUSIVE"  :"Integer",
        "INCLUSIVE"  :"Integer",
        "SHORT":"Short",
        "INTEGER":"Integer",
        "BOOL"  :"Integer",
        "LONG"  :"Long",
        "TIMESTAMP":"Long",
        "REAL"  :"Double",
        "GUID"  :"String",
        "TEXT"  :"String",
        "BLOB"  :"Byte",
        "FILE"  :"String",
        "FLOAT"  :"Float",
        "DOUBLE":"Double",
        default: key
]

auxTupleMap ::= [ 
       "FILE": "refFileTupleTmpl", 
       "BLOB": "refBlobTupleTmpl", 
       default: "defaultTupleTmpl" 
]

auxTuple(type,value,prefix) ::= <%
<auxTupleMap.(type)>
%>

javaTypeSQLiteMap ::= [
        "SERIAL":"TEXT",
        "FK"    :"INTEGER",
        "EXCLUSIVE"  :"INTEGER",
        "INCLUSIVE"  :"INTEGER",
        "SHORT":"INTEGER",
        "INTEGER":"INTEGER",
        "BOOL"  :"INTEGER",
        "LONG"  :"INTEGER",
        "TIMESTAMP":"INTEGER",
        "REAL"  :"REAL",
        "GUID"  :"TEXT",
        "TEXT"  :"TEXT",
        "BLOB"  :"BLOB",
        "FILE"  :"TEXT",
        "FLOAT" :"REAL",
        "DOUBLE":"REAL",
        default: key
]


