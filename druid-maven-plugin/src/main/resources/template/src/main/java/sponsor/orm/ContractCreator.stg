PATH(directory, isSkeleton, name) ::= "<directory>/<name>Creator.java"

BODY(contract) ::= <<
package com.walkernation.db.orm;

import java.util.ArrayList;

import com.walkernation.db.provider.ContentDescriptor;

import android.content.ContentValues;
import android.database.Cursor;

public class <contract.root.name.bactrian>Creator {

	public static ContentValues getCVfrom<contract.root.name.bactrian>(final <contract.root.name.bactrian>Data data) {
		ContentValues rValue = new ContentValues();

		/*
		 * this is how you would check objects that are being stored ========>
		 * if (data.[member> != null) { rValue.put([key>, data.[data_member>);}
		 */

		rValue.put(ContentDescriptor.<contract.root.name.bactrian>.Cols.LAT_NAME, data.latitude);
		rValue.put(ContentDescriptor.<contract.root.name.bactrian>.Cols.LONG_NAME, data.longitude);
		rValue.put(ContentDescriptor.<contract.root.name.bactrian>.Cols.HEIGHT_NAME, data.height);
		rValue.put(ContentDescriptor.<contract.root.name.bactrian>.Cols.USER_ID_NAME, data.userID);

		return rValue;
	}

	/**
	 * Get <contract.root.name.bactrian>Data object from ContentValues object
	 * 
	 * @param cv
	 * @return
	 */
	// I'm not even sure this is used/usable, but here in case it is...
	public static <contract.bascontract.root.name.bactrian>Data CvTo<contract.root.name.bactrian>Data(final ContentValues cv) {
		// set default values
		long latitude = 0;
		long longitude = 0;
		long height = 0;
		long userid = 0;

		// // can only do this because all 4 are long, but nice
		// // might be useful for VERY large objects, with lots of similar
		// // data type, make an iterator for loop for each data type
		// // will require a string[] of col names for that type
		// for (String cvColName : COLUMN_NAMES) {
		//
		// if (cv.containsKey(cvColName)) {
		// latitude = cv.getAsLong(cvColName);
		// }
		// }

		// check if CV contains keys, and if so, assign values
		if (cv.containsKey(ContentDescriptor.<contract.root.name.bactrian>.Cols.LAT_NAME)) {
			latitude = cv.getAsLong(ContentDescriptor.<contract.root.name.bactrian>.Cols.LAT_NAME);
		}
		if (cv.containsKey(ContentDescriptor.<contract.root.name.bactrian>.Cols.LONG_NAME)) {
			longitude = cv.getAsLong(ContentDescriptor.<contract.root.name.bactrian>.Cols.LONG_NAME);
		}
		if (cv.containsKey(ContentDescriptor.<contract.root.name.bactrian>.Cols.HEIGHT_NAME)) {
			height = cv.getAsLong(ContentDescriptor.<contract.root.name.bactrian>.Cols.HEIGHT_NAME);
		}
		if (cv.containsKey(ContentDescriptor.<contract.root.name.bactrian>.Cols.USER_ID_NAME)) {
			userid = cv.getAsLong(ContentDescriptor.<contract.root.name.bactrian>.Cols.USER_ID_NAME);
		}
		// construct the returned object
		<contract.root.name.bactrian>Data rValue = new <contract.root.name.bactrian>Data(latitude, longitude, height,
				userid);
		return rValue;
	}

	/**
	 * Get all of the <contract.root.name.bactrian>Data from the passed in cursor.
	 * 
	 * @param cursor
	 *            passed in cursor
	 * @return ArrayList\<<contract.root.name.bactrian>Data\> The set of <contract.root.name.bactrian>Data
	 */
	public static ArrayList\<<contract.root.name.bactrian>Data> get<contract.root.name.bactrian>DataArrayListFromCursor(
			Cursor cursor) {
		ArrayList\<<contract.root.name.bactrian>Data> rValue = new ArrayList\<<contract.root.name.bactrian>Data>();
		if (cursor != null) {
			cursor.moveToFirst();
			do {
				rValue.add(get<contract.root.name.bactrian>DataFromCursor(cursor));
			} while (cursor.moveToNext() == true);
		}
		return rValue;
	}

	/**
	 * Get the first <contract.root.name.bactrian>Data from the passed in cursor.
	 * 
	 * @param cursor
	 *            passed in cursor
	 * @return <contract.root.name.bactrian>Data object
	 */
	public static <contract.root.name.bactrian>Data get<contract.root.name.bactrian>DataFromCursor(Cursor cursor) {

		long latitude = cursor.getLong(cursor
				.getColumnIndex(ContentDescriptor.<contract.root.name.bactrian>.Cols.LAT_NAME));
		long longitude = cursor.getLong(cursor
				.getColumnIndex(ContentDescriptor.<contract.root.name.bactrian>.Cols.LONG_NAME));
		long height = cursor.getLong(cursor
				.getColumnIndex(ContentDescriptor.<contract.root.name.bactrian>.Cols.HEIGHT_NAME));
		long user_id = cursor.getLong(cursor
				.getColumnIndex(ContentDescriptor.<contract.root.name.bactrian>.Cols.USER_ID_NAME));

		<contract.root.name.bactrian>Data location = new <contract.root.name.bactrian>Data(latitude, longitude, height,
				user_id);

		return location;
	}
}

>>