
import "../../dataTypeMaps.stg"

PATH(delimiter, directory, contract, isSkeleton, item) ::= <%
<directory.path><delimiter><contract.root.sponsor.path><delimiter><contract.root.name.camel><delimiter>orm<delimiter><item.name.bactrian>Creator.java
%>


SKELETON(contract,item) ::= <<
>>

BODY(contract,item) ::= <<
// ST:BODY:start
package <package(contract,item)>;

import java.util.ArrayList;

// ST:package:inline
import <package(contract)>.provider.ContentDescriptor;
// ST:package:complete

import android.content.ContentValues;
import android.database.Cursor;

public class <item.name.bactrian>Creator {

  public static ContentValues getCVfrom<item.name.bactrian>(final <item.name.bactrian>Data data) {
    ContentValues rValue = new ContentValues();
    // ST:putField:inline
    <item.fields: { field | <putField(field)> }; separator="\n">
    // ST:putField:complete
    return rValue;
  }

  /**
   * Get <item.name.bactrian>Data object from ContentValues object
   * 
   * @param cv
   * @return
   */
  // I'm not even sure this is used/usable, but here in case it is...
  public static <item.name.bactrian>Data CvTo<item.name.bactrian>Data(final ContentValues cv) {
    // set default values
    
    // ST:setValue:inline
    <item.fields: { field | <setValue(field)> }; separator="\n">
    // ST:setValue:complete
    
    // construct the returned object
    <item.name.bactrian>Data rValue = 
       new <item.name.bactrian>Data(<item.fields: { field | <field.name.camel> }; separator=",">);
        
    return rValue;
  }

  /**
   * Get all of the <item.name.bactrian>Data from the passed in cursor.
   * 
   * @param cursor
   *            passed in cursor
   * @return ArrayList\<<item.name.bactrian>Data\> The set of <item.name.bactrian>Data
   */
  public static ArrayList\<<item.name.bactrian>Data> get<item.name.bactrian>DataArrayListFromCursor(
      Cursor cursor) {
    ArrayList\<<item.name.bactrian>Data> rValue = new ArrayList\<<item.name.bactrian>Data>();
    if (cursor != null) {
      cursor.moveToFirst();
      do {
        rValue.add(get<item.name.bactrian>DataFromCursor(cursor));
      } while (cursor.moveToNext() == true);
    }
    return rValue;
  }

  /**
   * Get the first <item.name.bactrian>Data from the passed in cursor.
   * 
   * @param cursor
   *            passed in cursor
   * @return <item.name.bactrian>Data object
   */
  public static <item.name.bactrian>Data get<item.name.bactrian>DataFromCursor(Cursor cursor) {

    // ST:getValue:inline
    <item.fields: { field | <getValue(field)> }; separator="\n">
    // ST:getValue:complete

    // construct the returned object
    <item.name.bactrian>Data rValue = 
       new <item.name.bactrian>Data(<item.fields: { field | <field.name.camel> }; separator=",">);
        
    return rValue;
  }
}
// ST:BODY:end
>>

package(contract,relation) ::= "<contract.root.sponsor.base>.<contract.root.name.camel>.orm"

putField(field) ::= <%
rValue.put(ContentDescriptor.<item.name.bactrian>.Cols.<field.name.cobra>_NAME, data.<field.name.camel>);
%>

setValue(field) ::= <<

<javaTypeMap.(field.dtype)> <field.name.camel> = <literalValue(field.dtype, field.default)>;
if (cv.containsKey(ContentDescriptor.<item.name.bactrian>.Cols.<field.name.cobra>_NAME)) {
  <field.name.camel> = cv.getAs<javaMethodTypeMap.(field.dtype)>(ContentDescriptor.<item.name.bactrian>.Cols.<field.name.cobra>_NAME);
}
>>
 
getValue(field) ::= <<
<javaTypeMap.(field.dtype)> <field.name.camel> = cursor.get<cursorBoxTypeMap.(field.dtype)>(cursor 
        .getColumnIndex(ContentDescriptor.<item.name.bactrian>.Cols.<field.name.cobra>_NAME));
>>